% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/core.R
\name{createRBNs}
\alias{createRBNs}
\title{Create a set of random networks.}
\usage{
createRBNs(prexName = "RBN_", numNetworks = 10, model = "BA",
           numNodes = 10, numEdges = 20, probOfNegative = 0.5,
           referedNetwork = NULL, shuffleRate = 4.0)
}
\arguments{
\item{prexName}{The common prefix of generated random network names, default is "RBN_"}

\item{numNetworks}{The number of generated random networks, default is 10}

\item{model}{The specified generation model from among four models: BA, ER, Shuffle 1 and Shuffle 2. Default is "BA".}

\item{numNodes}{The number of nodes in a random network, default is 10}

\item{numEdges}{The number of edges in a random network, default is 20}

\item{probOfNegative}{The probability of negative links's assignment in a random network, default is 0.5}

\item{referedNetwork}{The specific reference network used for two shuffling models}

\item{shuffleRate}{The shuffling intensity of "Shuffle 2" model. The number of rewiring steps = (Shuffling intensity) x (number of edges). Default is 4.}
}
\value{
The generated random network objects.
}
\description{
Create a set of random networks using different generation models.
}
\details{
This function generates a set of random networks using a generation model from among four models:
Barabasi-Albert (BA) model [1], Erdos-Renyi (ER) variant model [2] and two shuffling models (Shuffle 1 and Shuffle 2) [3].
Refer to the literature in the References section for more details.
}
\examples{
# Generate all possible initial-states each containing 10 Boolean nodes
set1 <- generateStates(10, "all")

# Generate random networks based on BA model
ba_rbns <- createRBNs("BA_RBN_", 2, "BA", 10, 17)

# For each random network, generate all possible groups each containing a single node
ba_rbns <- generateGroups(ba_rbns, "all", 1, 0)

# For each random network, calculate sensitivity values of all nodes against "knockout" mutation
ba_rbns <- calSensitivity(ba_rbns, set1, "knockout")

# For each random network, calculate structural measures of all nodes/edges
ba_rbns <- findFBLs(ba_rbns, maxLength = 10)
ba_rbns <- findFFLs(ba_rbns)
ba_rbns <- calCentrality(ba_rbns)

print(ba_rbns)
output(ba_rbns)
}
\references{
1. Barabasi A-L, Albert R (1999) Emergence of Scaling in Random Networks. Science 286: 509-512. doi: 10.1126/science.286.5439.509

2. Le D-H, Kwon Y-K (2011) NetDS: A Cytoscape plugin to analyze the robustness of dynamics and feedforward/feedback loop structures of biological networks. Bioinformatics.

3. Trinh H-C, Le D-H, Kwon Y-K (2014) PANET: A GPU-Based Tool for Fast Parallel Analysis of Robustness Dynamics and Feed-Forward/Feedback Loop Structures in Large-Scale Biological Networks. PLoS ONE 9: e103010.
}
\seealso{
\code{\link{loadNetwork}}, \code{\link{calSensitivity}}, \code{\link{generateStates}}, \code{\link{generateState}}, \code{\link{generateGroups}}, \code{\link{generateGroup}}, \code{\link{findFBLs}}, \code{\link{findFFLs}}, \code{\link{calCentrality}}
}
